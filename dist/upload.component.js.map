{"version":3,"sources":["upload.component.ts"],"names":[],"mappings":"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","file":"upload.component.js","sourcesContent":["/// <reference path=\"../typings/index.d.ts\"/>\nimport * as angular from 'angular';\n\n// noinspection TypeScriptCheckImport\nimport {Config, dirname} from 'decaf-common';\nimport './upload.component.css!';\nimport uploadService, {UploadService} from './upload.service';\n\n\nexport const COMPONENT_NAME = 'upload';\nconst upload = angular.module(COMPONENT_NAME, [\n\tuploadService.name\n]);\n\nupload.config(function (platformProvider) {\n\tplatformProvider\n\t\t.register(COMPONENT_NAME)\n\t\t.state(COMPONENT_NAME, {\n\t\t\turl: `/${COMPONENT_NAME}`,\n\t\t\tviews: {\n\t\t\t\t'content@': {\n\t\t\t\t\ttemplateUrl: `${dirname(module.id)}/upload.component.html`,\n\t\t\t\t\tcontroller: UploadController,\n\t\t\t\t\tcontrollerAs: 'UploadController'\n\t\t\t\t}\n\t\t\t}\n\t\t})\n});\n\nclass UploadController {\n\tprivate $timeout:angular.ITimeoutService;\n\tprivate $sce:angular.ISCEService;\n\tisWaiting:boolean;\n\tuploadService:UploadService;\n\tdata:any;\n\tcurrentHelp:string;\n\n\tconstructor($timeout, $sce, UploadService:UploadService) {\n\t\tthis.uploadService = UploadService;\n\t\tthis.$timeout = $timeout;\n\t\tthis.$sce = $sce;\n\t\tthis.isWaiting = false;\n\t\tthis.data = {\n\t\t\tmedia: {\n\t\t\t\tfiles: {file: ''}, status: 'na', what: 'media', order: ['file'],\n\t\t\t\tdescription: `\n                <p>\n\t\t\t    <a href=\"https://github.com/DD-DeCaF/upload/blob/master/upload/data/examples/media.csv\">Media file</a> \n\t\t\t    lists one or more medium with  <a href=\"https://www.ebi.ac.uk/chebi\">chebi</a> \n\t\t\t    names of the ingredient and concentrations</li> \n\t\t\t    </p>\n\t\t\t   `\n\t\t\t},\n\t\t\tstrains: {\n\t\t\t\tfiles: {file: ''}, status: 'na', what: 'strains', order: ['file'],\n\t\t\t\tdescription: `\n                <p>\n\t\t\t    <a href=\"https://github.com/DD-DeCaF/upload/blob/master/upload/data/examples/strains.csv\">\n\t\t\t    Strains file</a> lists one strain per row.\n\t\t\t    </p>\n\t\t\t    `\n\t\t\t},\n\t\t\texperiment: {\n\t\t\t\tfiles: {samples: '', physiology: ''},\n\t\t\t\tstatus: 'na',\n\t\t\t\twhat: 'experiment',\n\t\t\t\torder: ['samples file', 'physiology file'],\n\t\t\t\tdescription: `\n                <p>\n\t\t\t\tUploading experiment details and physiological measurements is done with two files. \n\t\t        <a href=\"https://github.com/DD-DeCaF/upload/blob/master/upload/data/examples/samples.csv\">\n\t\t        Samples file</a> and the \n\t\t        <a href=\"https://github.com/DD-DeCaF/upload/blob/master/upload/data/examples/physiology.csv\">\n\t\t\t    physiology file</a>   \n\t\t\t\tThe first (samples file) should have one row per reactor (sample) and the following columns:\n\t\t\t\t</p>\n\t\t\t\t\n\t\t\t    <p>\n\t\t\t    For every row in the samples file, there must furthermore be one additional column \n\t\t\t    in the physiology file listing measurements for that sample. The name of that corresponding column must\n\t\t\t    be {experiment}_{reactor} e.g. foo_A1\n\t\t\t    </p>\n\t\t\t    \n`\n\t\t\t}\n\t\t};\n\t}\n\n\thelp(what) {\n\t\tthis.currentHelp = this.$sce.trustAsHtml(this.data[what].description);\n\t}\n\n\tsetFile(file, what, which) {\n\t\tthis.data[what].files[which] = file;\n\t}\n\n\tclear() {\n\t\tfor (var what in this.data) {\n\t\t\tif (this.data.hasOwnProperty(what)) {\n\t\t\t\tfor (var key in this.data[what].files) {\n\t\t\t\t\tif (this.data[what].files.hasOwnProperty(key)) {\n\t\t\t\t\t\tthis.data[what].files[key] = ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tbuildFileList(what) {\n\t\tvar fileList = [];\n\t\tfor (var i = 0; i < this.data[what].order.length; i++) {\n\t\t\tif (this.data[what].files[this.data[what].order[i]]) {\n\t\t\t\tfileList.push(this.data[what].files[this.data[what].order[i]]);\n\t\t\t}\n\t\t}\n\t\treturn fileList;\n\t}\n\n\tsubmit() {\n\t\tfor (var what in this.data) {\n\t\t\tif (this.data.hasOwnProperty(what)) {\n\t\t\t\tvar fileList = this.buildFileList(what);\n\t\t\t\tif (fileList.length == this.data[what].order.length) {\n\t\t\t\t\tthis.isWaiting = true;\n\t\t\t\t\tthis.data[what].status = 'na';\n\t\t\t\t\tvar data = {file: fileList, what: what, project_id: 'TST'};\n\t\t\t\t\tthis.uploadService.uploadFile(data)\n\t\t\t\t\t\t.then(function (what, ref) {\n\t\t\t\t\t\t\t\treturn function (response) {\n\t\t\t\t\t\t\t\t\tref.isWaiting = false;\n\t\t\t\t\t\t\t\t\tref.data[what].response = response.data;\n\t\t\t\t\t\t\t\t\tconsole.log(response.data.valid);\n\t\t\t\t\t\t\t\t\tif (response.data.valid) {\n\t\t\t\t\t\t\t\t\t\tref.data[what].status = 'ok';\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tref.data[what].status = 'ng';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}(what, this),\n\t\t\t\t\t\t\t//error\n\t\t\t\t\t\t\t([status, dataResponse]) => {\n\t\t\t\t\t\t\t\tconsole.log(status);\n\t\t\t\t\t\t\t\tconsole.log(dataResponse);\n\t\t\t\t\t\t\t\tthis.isWaiting = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default upload;\n"]}